apply plugin: 'maven-publish'
apply plugin: 'signing'

def SIGNING_KEY_ID = "signing.keyId"
def SIGNING_PASSWORD = "signing.password"
def SIGNING_SECRET_KEY_RING_FILE = "signing.secretKeyRingFile"
def OSSRH_USERNAME = "ossrhUsername"
def OSSRH_PASSWORD = "ossrhPassword"
def SONATYPE_STAGING_PROFILE_ID = "sonatypeStagingProfileId"

android {
    publishing {
        singleVariant('release')
    }
}

// stub for sources, required by MavenCentral
tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from file('build/intermediates/aar_main_jar/release/classes.jar')
}

// stub for java doc, required by MavenCentral
tasks.register('javadoc', Javadoc) {
    failOnError false
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

group = GROUP_ID
version = VERSION_NAME

ext[SIGNING_KEY_ID] = ''
ext[SIGNING_PASSWORD] = ''
ext[SIGNING_SECRET_KEY_RING_FILE] = ''
ext[OSSRH_USERNAME] = ''
ext[OSSRH_PASSWORD] = ''
ext[SONATYPE_STAGING_PROFILE_ID] = ''

File localPropsFile = project.rootProject.file('local.properties')
if (localPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(localPropsFile))
    p.each { key, value ->
        ext[key] = value
    }
} else {
    ext[SIGNING_KEY_ID] = System.getenv('SIGNING_KEY_ID')
    ext[SIGNING_PASSWORD] = System.getenv('SIGNING_PASSWORD')
    ext[SIGNING_SECRET_KEY_RING_FILE] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext[OSSRH_USERNAME] = System.getenv('OSSRH_USERNAME')
    ext[OSSRH_PASSWORD] = System.getenv('OSSRH_PASSWORD')
    ext[SONATYPE_STAGING_PROFILE_ID] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId GROUP_ID
                artifactId ARTIFACT_NAME
                version VERSION_NAME

                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    artifact("$buildDir/libs/${project.getName()}-${version}.jar")
                }

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = ARTIFACT_NAME
                    description = LIB_DESCRIPTION
                    url = LIB_SITE

                    licenses {
                        license {
                            name = LIB_LICENSE_NAME
                            url = LIB_LICENSE_URL
                        }
                    }

                    scm {
                        connection = LIB_SCM_CONNECTION
                        developerConnection = LIB_SCM_DEVELOPER_CONNECTION
                        url = LIB_SCM_URL
                    }

                    developers {
                        developer {
                            id = LIB_DEVELOPER_ID
                            name = LIB_DEVELOPER_NAME
                            email = LIB_DEVELOPER_EMAIL
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "sonatype"
                url = version.endsWith('SNAPSHOT') ? LIB_SNAPSHOTS_URL : LIB_STAGING_URL

                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
            }
        }
    }
}

signing {
    sign publishing.publications
}
